import { getAST, states } from './key-ast.util.js'
import { getFormatter } from './value-formatter.js'
/** @import {Token, AST} from './key-ast.util.js' */
/** @import {TemplateFormatter} from './value-formatter.js' */

const tokenToString = (() => {
  /** @typedef {(token: Token) => string} TokenToString */

  /** @type {TokenToString[]} */
  const mapper = []
  /** @type {TokenToString} */
  const defaultMapper = (token) => token.text
  mapper[states.normal] = defaultMapper
  mapper[states.capture] = (token) => {
    const { childTokens } = token

    if (childTokens.length <= 0) {
      return '{}'
    }
    let normalizedCapture = tokenToString(childTokens[0])
    for (let i = 1, e = childTokens.length; i < e; i++) {
      const previousToken = childTokens[i - 1]
      const token = childTokens[i]
      if (previousToken.type === states.capture_expr && token.type === states.capture_expr) {
        normalizedCapture += ' '
      }
      normalizedCapture += tokenToString(token)
    }
    return `{${normalizedCapture}}`
  }

  /** @type {TokenToString} */
  const tokenToString = (token) => (mapper[token.type] ?? defaultMapper)(token)
  return tokenToString
})()

/**
 * Normalizes translation entry value, we use the AST instead of the text
 * to not parse it multiple times on {@link parseValue}
 * @param {AST} ast - parsed AST of the value
 * @returns {string} normalized value
 */
function getNormalizedValue (ast) {
  return ast.tokens.map((token) => tokenToString(token)).join('')
}

/**
 * Parses I18n translation entry value
 * @param {string} value - target i18n entry value
 * @returns {ParseResult} - parse result information
 */
export function parseValue (value) {
  const ast = getAST(value)
  const formatter = getFormatter(ast)
  const normalizedValue = getNormalizedValue(ast)

  return {
    value,
    ast,
    formatter,
    format: formatter.format,
    normalizedValue,
  }
}

/**
 * @typedef {object} ParseResult
 * @property {string} value - target value used to parse
 * @property {string} normalizedValue - normalized `value`
 * @property {TemplateFormatter} formatter - function to get the final output based on received key parameters
 * @property {TemplateFormatter['format']} format - returns the final output based on received key parameters
 * @property {AST} ast - abstract syntax tree generated by the parser, usefull to debug
 */
